{:rename-macros {}, :renames {}, :externs {Error {}, Infinity {}}, :use-macros {}, :excludes #{}, :name my-sketch.drawing, :imports nil, :requires {q quil.core, quil.core quil.core}, :uses nil, :defs {triangles-for-block {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 136, :column 7, :end-line 136, :end-column 26, :arglists (quote ([mx my mz]))}, :name my-sketch.drawing/triangles-for-block, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 26, :method-params ([mx my mz]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 3, :fn-var true, :arglists (quote ([mx my mz]))}, draw-triangle-stacks {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 85, :column 7, :end-line 85, :end-column 27, :arglists (quote ([artist x y & stacks])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(artist x y stacks)], :arglists ([artist x y & stacks]), :arglists-meta (nil)}}, :name my-sketch.drawing/draw-triangle-stacks, :variadic true, :file "src/my_sketch/drawing.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(artist x y stacks)], :arglists ([artist x y & stacks]), :arglists-meta (nil)}, :method-params [(artist x y stacks)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 3, :fn-var true, :arglists ([artist x y & stacks])}, make-left-triangle {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 9, :column 7, :end-line 9, :end-column 25, :arglists (quote ([width color img]))}, :name my-sketch.drawing/make-left-triangle, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 25, :method-params ([width color img]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width color img]))}, triangles {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 73, :column 7, :end-line 73, :end-column 16, :arglists (quote ([artist]))}, :name my-sketch.drawing/triangles, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 16, :method-params ([artist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([artist]))}, n-colors {:name my-sketch.drawing/n-colors, :file "src/my_sketch/drawing.cljs", :line 5, :column 1, :end-line 5, :end-column 14, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 5, :column 6, :end-line 5, :end-column 14}, :tag number}, color {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 65, :column 7, :end-line 65, :end-column 12, :arglists (quote ([artist idx]))}, :name my-sketch.drawing/color, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 12, :method-params ([artist idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([artist idx]))}, tile-width {:name my-sketch.drawing/tile-width, :file "src/my_sketch/drawing.cljs", :line 6, :column 1, :end-line 6, :end-column 16, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 6, :column 6, :end-line 6, :end-column 16}, :tag number}, make-view {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 164, :column 7, :end-line 164, :end-column 16, :arglists (quote ([grid]))}, :name my-sketch.drawing/make-view, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 16, :method-params ([grid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid]))}, draw-triangle {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 77, :column 7, :end-line 77, :end-column 20, :arglists (quote ([x y img]))}, :name my-sketch.drawing/draw-triangle, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 20, :method-params ([x y img]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y img]))}, make-artist {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 51, :column 7, :end-line 51, :end-column 18, :arglists (quote ([]))}, :name my-sketch.drawing/make-artist, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, colors {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 69, :column 7, :end-line 69, :end-column 13, :arglists (quote ([artist]))}, :name my-sketch.drawing/colors, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 13, :method-params ([artist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([artist]))}, make-triangle {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 37, :column 7, :end-line 37, :end-column 20, :arglists (quote ([color direction]))}, :name my-sketch.drawing/make-triangle, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 20, :method-params ([color direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([color direction]))}, make-right-triangle {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 23, :column 7, :end-line 23, :end-column 26, :arglists (quote ([width color img]))}, :name my-sketch.drawing/make-right-triangle, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 26, :method-params ([width color img]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists (quote ([width color img]))}, map-to-screen {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 99, :column 7, :end-line 99, :end-column 20, :arglists (quote ([x y z]))}, :name my-sketch.drawing/map-to-screen, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 20, :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z]))}, draw-block {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 104, :column 7, :end-line 104, :end-column 17, :arglists (quote ([mx my mz view color_offset layer]))}, :name my-sketch.drawing/draw-block, :variadic false, :file "src/my_sketch/drawing.cljs", :end-column 17, :method-params ([mx my mz view color_offset layer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 6, :fn-var true, :arglists (quote ([mx my mz view color_offset layer]))}, half-width {:name my-sketch.drawing/half-width, :file "src/my_sketch/drawing.cljs", :line 7, :column 1, :end-line 7, :end-column 16, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/drawing.cljs", :line 7, :column 6, :end-line 7, :end-column 16}, :tag number}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:block :argb :colors :right :triangles :left}, :order [:argb :colors :triangles :left :right :block]}, :doc nil}