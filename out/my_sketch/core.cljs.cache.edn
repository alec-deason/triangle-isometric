{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name my-sketch.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware}, :uses nil, :defs {on-key-down {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 137, :column 7, :end-line 137, :end-column 18, :arglists (quote ([state event]))}, :name my-sketch.core/on-key-down, :variadic false, :file "src/my_sketch/core.cljs", :end-column 18, :method-params ([state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state event]))}, draw-state {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 101, :column 7, :end-line 101, :end-column 17, :arglists (quote ([state]))}, :name my-sketch.core/draw-state, :variadic false, :file "src/my_sketch/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, neighborhood {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 122, :column 7, :end-line 122, :end-column 19, :arglists (quote ([x y z]))}, :name my-sketch.core/neighborhood, :variadic false, :file "src/my_sketch/core.cljs", :end-column 19, :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z]))}, update-state {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 89, :column 7, :end-line 89, :end-column 19, :arglists (quote ([state]))}, :name my-sketch.core/update-state, :variadic false, :file "src/my_sketch/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-dood {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 96, :column 7, :end-line 96, :end-column 16, :arglists (quote ([x y z]))}, :name my-sketch.core/draw-dood, :variadic false, :file "src/my_sketch/core.cljs", :end-column 16, :method-params ([x y z]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y z]))}, my-sketch {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 146, :column 14, :end-line 146, :end-column 23, :export true, :arglists (quote ([]))}, :name my-sketch.core/my-sketch, :variadic false, :file "src/my_sketch/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, make-noise {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 23, :column 7, :end-line 23, :end-column 17, :arglists (quote ([w h]))}, :name my-sketch.core/make-noise, :variadic false, :file "src/my_sketch/core.cljs", :end-column 17, :method-params ([w h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([w h]))}, make-view {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([grid]))}, :name my-sketch.core/make-view, :variadic false, :file "src/my_sketch/core.cljs", :end-column 16, :method-params ([grid]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([grid]))}, move-dood {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 126, :column 7, :end-line 126, :end-column 16, :arglists (quote ([state dx dy]))}, :name my-sketch.core/move-dood, :variadic false, :file "src/my_sketch/core.cljs", :end-column 16, :method-params ([state dx dy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state dx dy]))}, make-triangle {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 6, :column 7, :end-line 6, :end-column 20, :arglists (quote ([color direction]))}, :name my-sketch.core/make-triangle, :variadic false, :file "src/my_sketch/core.cljs", :end-column 20, :method-params ([color direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([color direction]))}, setup {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 65, :column 7, :end-line 65, :end-column 12, :arglists (quote ([]))}, :name my-sketch.core/setup, :variadic false, :file "src/my_sketch/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, draw-block {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 42, :column 7, :end-line 42, :end-column 17, :arglists (quote ([mx my mz view]))}, :name my-sketch.core/draw-block, :variadic false, :file "src/my_sketch/core.cljs", :end-column 17, :method-params ([mx my mz view]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mx my mz view]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:dirty :block :fn :key :up-left :down-left :grid :rgb :argb :noise :update :empty :size :setup :middleware :host :dood :key-pressed :host-id :no-start :draw :down-right :up-right :view}, :order [:argb :down-left :up-right :up-left :down-right :rgb :dirty :grid :noise :dood :draw :view :block :empty :key :host :update :size :setup :middleware :key-pressed :no-start :fn :host-id]}, :doc nil}