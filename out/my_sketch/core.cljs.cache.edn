{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name my-sketch.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware, d my-sketch.drawing, my-sketch.drawing my-sketch.drawing, t my-sketch.terrain, my-sketch.terrain my-sketch.terrain}, :uses nil, :defs {setup {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 10, :column 7, :end-line 10, :end-column 12, :arglists (quote ([]))}, :name my-sketch.core/setup, :variadic false, :file "src/my_sketch/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, update-state {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([state]))}, :name my-sketch.core/update-state, :variadic false, :file "src/my_sketch/core.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, draw-state {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 36, :column 7, :end-line 36, :end-column 17, :arglists (quote ([state]))}, :name my-sketch.core/draw-state, :variadic false, :file "src/my_sketch/core.cljs", :end-column 17, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, move-dood {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 52, :column 7, :end-line 52, :end-column 16, :arglists (quote ([state dx dy]))}, :name my-sketch.core/move-dood, :variadic false, :file "src/my_sketch/core.cljs", :end-column 16, :method-params ([state dx dy]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state dx dy]))}, on-key-down {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 67, :column 7, :end-line 67, :end-column 18, :arglists (quote ([state event]))}, :name my-sketch.core/on-key-down, :variadic false, :file "src/my_sketch/core.cljs", :end-column 18, :method-params ([state event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state event]))}, my-sketch {:protocol-inline nil, :meta {:file "/home/alec/Documents/Code/my-sketch/src/my_sketch/core.cljs", :line 76, :column 14, :end-line 76, :end-column 23, :export true, :arglists (quote ([]))}, :name my-sketch.core/my-sketch, :variadic false, :file "src/my_sketch/core.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:dirty :fn :key :grid :rgb :update :artist :size :setup :middleware :host :dood :key-pressed :host-id :no-start :draw :view}, :order [:rgb :grid :artist :view :dood :draw :dirty :key :host :update :size :setup :middleware :key-pressed :no-start :fn :host-id]}, :doc nil}